// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorPressure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SensorPressure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SensorPressure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SensorPressure_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SensorPressure_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SensorPressure_2eproto;
namespace sensor_msgs {
namespace msgs {
class Pressure;
class PressureDefaultTypeInternal;
extern PressureDefaultTypeInternal _Pressure_default_instance_;
}  // namespace msgs
}  // namespace sensor_msgs
PROTOBUF_NAMESPACE_OPEN
template<> ::sensor_msgs::msgs::Pressure* Arena::CreateMaybeMessage<::sensor_msgs::msgs::Pressure>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sensor_msgs {
namespace msgs {

// ===================================================================

class Pressure PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.msgs.Pressure) */ {
 public:
  inline Pressure() : Pressure(nullptr) {};
  virtual ~Pressure();

  Pressure(const Pressure& from);
  Pressure(Pressure&& from) noexcept
    : Pressure() {
    *this = ::std::move(from);
  }

  inline Pressure& operator=(const Pressure& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pressure& operator=(Pressure&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pressure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pressure* internal_default_instance() {
    return reinterpret_cast<const Pressure*>(
               &_Pressure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pressure& a, Pressure& b) {
    a.Swap(&b);
  }
  inline void Swap(Pressure* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pressure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pressure* New() const final {
    return CreateMaybeMessage<Pressure>(nullptr);
  }

  Pressure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pressure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pressure& from);
  void MergeFrom(const Pressure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pressure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensor_msgs.msgs.Pressure";
  }
  protected:
  explicit Pressure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SensorPressure_2eproto);
    return ::descriptor_table_SensorPressure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPressureFieldNumber = 1,
    kStddevFieldNumber = 2,
    kDepthFieldNumber = 3,
  };
  // required double pressure = 1 [default = 0];
  bool has_pressure() const;
  private:
  bool _internal_has_pressure() const;
  public:
  void clear_pressure();
  double pressure() const;
  void set_pressure(double value);
  private:
  double _internal_pressure() const;
  void _internal_set_pressure(double value);
  public:

  // required double stddev = 2 [default = -1];
  bool has_stddev() const;
  private:
  bool _internal_has_stddev() const;
  public:
  void clear_stddev();
  double stddev() const;
  void set_stddev(double value);
  private:
  double _internal_stddev() const;
  void _internal_set_stddev(double value);
  public:

  // optional double depth = 3 [default = -1];
  bool has_depth() const;
  private:
  bool _internal_has_depth() const;
  public:
  void clear_depth();
  double depth() const;
  void set_depth(double value);
  private:
  double _internal_depth() const;
  void _internal_set_depth(double value);
  public:

  // @@protoc_insertion_point(class_scope:sensor_msgs.msgs.Pressure)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double pressure_;
  double stddev_;
  double depth_;
  friend struct ::TableStruct_SensorPressure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pressure

// required double pressure = 1 [default = 0];
inline bool Pressure::_internal_has_pressure() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Pressure::has_pressure() const {
  return _internal_has_pressure();
}
inline void Pressure::clear_pressure() {
  pressure_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Pressure::_internal_pressure() const {
  return pressure_;
}
inline double Pressure::pressure() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Pressure.pressure)
  return _internal_pressure();
}
inline void Pressure::_internal_set_pressure(double value) {
  _has_bits_[0] |= 0x00000001u;
  pressure_ = value;
}
inline void Pressure::set_pressure(double value) {
  _internal_set_pressure(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Pressure.pressure)
}

// required double stddev = 2 [default = -1];
inline bool Pressure::_internal_has_stddev() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Pressure::has_stddev() const {
  return _internal_has_stddev();
}
inline void Pressure::clear_stddev() {
  stddev_ = -1;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Pressure::_internal_stddev() const {
  return stddev_;
}
inline double Pressure::stddev() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Pressure.stddev)
  return _internal_stddev();
}
inline void Pressure::_internal_set_stddev(double value) {
  _has_bits_[0] |= 0x00000002u;
  stddev_ = value;
}
inline void Pressure::set_stddev(double value) {
  _internal_set_stddev(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Pressure.stddev)
}

// optional double depth = 3 [default = -1];
inline bool Pressure::_internal_has_depth() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Pressure::has_depth() const {
  return _internal_has_depth();
}
inline void Pressure::clear_depth() {
  depth_ = -1;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Pressure::_internal_depth() const {
  return depth_;
}
inline double Pressure::depth() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Pressure.depth)
  return _internal_depth();
}
inline void Pressure::_internal_set_depth(double value) {
  _has_bits_[0] |= 0x00000004u;
  depth_ = value;
}
inline void Pressure::set_depth(double value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Pressure.depth)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SensorPressure_2eproto
