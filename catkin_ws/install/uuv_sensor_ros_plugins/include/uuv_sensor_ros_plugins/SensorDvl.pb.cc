// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorDvl.proto

#include "SensorDvl.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vector3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_vector3d_2eproto;
namespace sensor_msgs {
namespace msgs {
class DvlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dvl> _instance;
} _Dvl_default_instance_;
}  // namespace msgs
}  // namespace sensor_msgs
static void InitDefaultsscc_info_Dvl_SensorDvl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensor_msgs::msgs::_Dvl_default_instance_;
    new (ptr) ::sensor_msgs::msgs::Dvl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_msgs::msgs::Dvl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dvl_SensorDvl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Dvl_SensorDvl_2eproto}, {
      &scc_info_Vector3d_vector3d_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SensorDvl_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_SensorDvl_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SensorDvl_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SensorDvl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Dvl, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Dvl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Dvl, linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Dvl, linear_velocity_covariance_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::sensor_msgs::msgs::Dvl)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensor_msgs::msgs::_Dvl_default_instance_),
};

const char descriptor_table_protodef_SensorDvl_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017SensorDvl.proto\022\020sensor_msgs.msgs\032\016vec"
  "tor3d.proto\"]\n\003Dvl\022.\n\017linear_velocity\030\001 "
  "\002(\0132\025.gazebo.msgs.Vector3d\022&\n\032linear_vel"
  "ocity_covariance\030\002 \003(\002B\002\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SensorDvl_2eproto_deps[1] = {
  &::descriptor_table_vector3d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SensorDvl_2eproto_sccs[1] = {
  &scc_info_Dvl_SensorDvl_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SensorDvl_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SensorDvl_2eproto = {
  false, false, descriptor_table_protodef_SensorDvl_2eproto, "SensorDvl.proto", 146,
  &descriptor_table_SensorDvl_2eproto_once, descriptor_table_SensorDvl_2eproto_sccs, descriptor_table_SensorDvl_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_SensorDvl_2eproto::offsets,
  file_level_metadata_SensorDvl_2eproto, 1, file_level_enum_descriptors_SensorDvl_2eproto, file_level_service_descriptors_SensorDvl_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SensorDvl_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SensorDvl_2eproto)), true);
namespace sensor_msgs {
namespace msgs {

// ===================================================================

void Dvl::InitAsDefaultInstance() {
  ::sensor_msgs::msgs::_Dvl_default_instance_._instance.get_mutable()->linear_velocity_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
}
class Dvl::_Internal {
 public:
  using HasBits = decltype(std::declval<Dvl>()._has_bits_);
  static const ::gazebo::msgs::Vector3d& linear_velocity(const Dvl* msg);
  static void set_has_linear_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::gazebo::msgs::Vector3d&
Dvl::_Internal::linear_velocity(const Dvl* msg) {
  return *msg->linear_velocity_;
}
void Dvl::clear_linear_velocity() {
  if (linear_velocity_ != nullptr) linear_velocity_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Dvl::Dvl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  linear_velocity_covariance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensor_msgs.msgs.Dvl)
}
Dvl::Dvl(const Dvl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      linear_velocity_covariance_(from.linear_velocity_covariance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear_velocity()) {
    linear_velocity_ = new ::gazebo::msgs::Vector3d(*from.linear_velocity_);
  } else {
    linear_velocity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.msgs.Dvl)
}

void Dvl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dvl_SensorDvl_2eproto.base);
  linear_velocity_ = nullptr;
}

Dvl::~Dvl() {
  // @@protoc_insertion_point(destructor:sensor_msgs.msgs.Dvl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Dvl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete linear_velocity_;
}

void Dvl::ArenaDtor(void* object) {
  Dvl* _this = reinterpret_cast< Dvl* >(object);
  (void)_this;
}
void Dvl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dvl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dvl& Dvl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dvl_SensorDvl_2eproto.base);
  return *internal_default_instance();
}


void Dvl::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.msgs.Dvl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linear_velocity_covariance_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(linear_velocity_ != nullptr);
    linear_velocity_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dvl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .gazebo.msgs.Vector3d linear_velocity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float linear_velocity_covariance = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_linear_velocity_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_linear_velocity_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dvl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.msgs.Dvl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Vector3d linear_velocity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear_velocity(this), target, stream);
  }

  // repeated float linear_velocity_covariance = 2 [packed = true];
  if (this->_internal_linear_velocity_covariance_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_linear_velocity_covariance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.msgs.Dvl)
  return target;
}

size_t Dvl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.msgs.Dvl)
  size_t total_size = 0;

  // required .gazebo.msgs.Vector3d linear_velocity = 1;
  if (_internal_has_linear_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_velocity_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float linear_velocity_covariance = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_linear_velocity_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _linear_velocity_covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dvl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.msgs.Dvl)
  GOOGLE_DCHECK_NE(&from, this);
  const Dvl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dvl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.msgs.Dvl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.msgs.Dvl)
    MergeFrom(*source);
  }
}

void Dvl::MergeFrom(const Dvl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.msgs.Dvl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  linear_velocity_covariance_.MergeFrom(from.linear_velocity_covariance_);
  if (from._internal_has_linear_velocity()) {
    _internal_mutable_linear_velocity()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_linear_velocity());
  }
}

void Dvl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.msgs.Dvl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dvl::CopyFrom(const Dvl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.msgs.Dvl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dvl::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_linear_velocity()) {
    if (!linear_velocity_->IsInitialized()) return false;
  }
  return true;
}

void Dvl::InternalSwap(Dvl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  linear_velocity_covariance_.InternalSwap(&other->linear_velocity_covariance_);
  swap(linear_velocity_, other->linear_velocity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dvl::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace sensor_msgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensor_msgs::msgs::Dvl* Arena::CreateMaybeMessage< ::sensor_msgs::msgs::Dvl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensor_msgs::msgs::Dvl >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
