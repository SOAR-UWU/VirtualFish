// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorPressure.proto

#include "SensorPressure.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace sensor_msgs {
namespace msgs {
class PressureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pressure> _instance;
} _Pressure_default_instance_;
}  // namespace msgs
}  // namespace sensor_msgs
static void InitDefaultsscc_info_Pressure_SensorPressure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensor_msgs::msgs::_Pressure_default_instance_;
    new (ptr) ::sensor_msgs::msgs::Pressure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_msgs::msgs::Pressure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pressure_SensorPressure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pressure_SensorPressure_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SensorPressure_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_SensorPressure_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SensorPressure_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SensorPressure_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Pressure, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Pressure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Pressure, pressure_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Pressure, stddev_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::msgs::Pressure, depth_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::sensor_msgs::msgs::Pressure)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensor_msgs::msgs::_Pressure_default_instance_),
};

const char descriptor_table_protodef_SensorPressure_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024SensorPressure.proto\022\020sensor_msgs.msgs"
  "\"F\n\010Pressure\022\023\n\010pressure\030\001 \002(\001:\0010\022\022\n\006std"
  "dev\030\002 \002(\001:\002-1\022\021\n\005depth\030\003 \001(\001:\002-1"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SensorPressure_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SensorPressure_2eproto_sccs[1] = {
  &scc_info_Pressure_SensorPressure_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SensorPressure_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SensorPressure_2eproto = {
  false, false, descriptor_table_protodef_SensorPressure_2eproto, "SensorPressure.proto", 112,
  &descriptor_table_SensorPressure_2eproto_once, descriptor_table_SensorPressure_2eproto_sccs, descriptor_table_SensorPressure_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_SensorPressure_2eproto::offsets,
  file_level_metadata_SensorPressure_2eproto, 1, file_level_enum_descriptors_SensorPressure_2eproto, file_level_service_descriptors_SensorPressure_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SensorPressure_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SensorPressure_2eproto)), true);
namespace sensor_msgs {
namespace msgs {

// ===================================================================

void Pressure::InitAsDefaultInstance() {
}
class Pressure::_Internal {
 public:
  using HasBits = decltype(std::declval<Pressure>()._has_bits_);
  static void set_has_pressure(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stddev(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Pressure::Pressure(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensor_msgs.msgs.Pressure)
}
Pressure::Pressure(const Pressure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pressure_, &from.pressure_,
    static_cast<size_t>(reinterpret_cast<char*>(&depth_) -
    reinterpret_cast<char*>(&pressure_)) + sizeof(depth_));
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.msgs.Pressure)
}

void Pressure::SharedCtor() {
  pressure_ = 0;
  stddev_ = -1;
  depth_ = -1;
}

Pressure::~Pressure() {
  // @@protoc_insertion_point(destructor:sensor_msgs.msgs.Pressure)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pressure::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pressure::ArenaDtor(void* object) {
  Pressure* _this = reinterpret_cast< Pressure* >(object);
  (void)_this;
}
void Pressure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pressure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pressure& Pressure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pressure_SensorPressure_2eproto.base);
  return *internal_default_instance();
}


void Pressure::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.msgs.Pressure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    pressure_ = 0;
    stddev_ = -1;
    depth_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pressure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double pressure = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_pressure(&has_bits);
          pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double stddev = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_stddev(&has_bits);
          stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double depth = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_depth(&has_bits);
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pressure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.msgs.Pressure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double pressure = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_pressure(), target);
  }

  // required double stddev = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_stddev(), target);
  }

  // optional double depth = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.msgs.Pressure)
  return target;
}

size_t Pressure::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sensor_msgs.msgs.Pressure)
  size_t total_size = 0;

  if (_internal_has_pressure()) {
    // required double pressure = 1 [default = 0];
    total_size += 1 + 8;
  }

  if (_internal_has_stddev()) {
    // required double stddev = 2 [default = -1];
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Pressure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.msgs.Pressure)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double pressure = 1 [default = 0];
    total_size += 1 + 8;

    // required double stddev = 2 [default = -1];
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double depth = 3 [default = -1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pressure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.msgs.Pressure)
  GOOGLE_DCHECK_NE(&from, this);
  const Pressure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pressure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.msgs.Pressure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.msgs.Pressure)
    MergeFrom(*source);
  }
}

void Pressure::MergeFrom(const Pressure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.msgs.Pressure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      pressure_ = from.pressure_;
    }
    if (cached_has_bits & 0x00000002u) {
      stddev_ = from.stddev_;
    }
    if (cached_has_bits & 0x00000004u) {
      depth_ = from.depth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pressure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.msgs.Pressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pressure::CopyFrom(const Pressure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.msgs.Pressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pressure::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Pressure::InternalSwap(Pressure* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pressure_, other->pressure_);
  swap(stddev_, other->stddev_);
  swap(depth_, other->depth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pressure::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace sensor_msgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensor_msgs::msgs::Pressure* Arena::CreateMaybeMessage< ::sensor_msgs::msgs::Pressure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensor_msgs::msgs::Pressure >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
